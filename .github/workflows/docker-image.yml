name: Build and Push Docker Image
on:
  push:
    branches:
      - testing
      - pre-release
      - alpha
      - beta
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Custom tag name for the Docker image"
        required: false
        default: ""

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Node.js for Building Frontend
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install Dependencies and Build Frontend
        run: |
          cd frontend
          npm install
          npm run build

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Login to Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Lowercase repository owner
        id: lowercase_repo_owner
        run: echo "REPO_OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Determine Docker image tag
        id: tag
        run: |
          # Fetch all previous tags and determine the next build number
          last_build_number=$(curl -s "https://api.github.com/repos/${{ github.repository_owner }}/${{ github.repository }}/tags" | jq -r '.[0].name' | sed 's/^testing-//')
          if [[ -z "$last_build_number" ]]; then
            next_build_number=1
          else
            next_build_number=$((last_build_number + 1))
          fi
          echo "IMAGE_TAG=testing-${next_build_number}" >> $GITHUB_ENV

      - name: Build and Push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ghcr.io/${{ env.REPO_OWNER }}/ssh-project:${{ env.IMAGE_TAG }}

      - name: Delete old Docker images (keep only 6 latest)
        run: |
          # Get a list of all Docker images tagged with the repository and filter the oldest ones
          image_ids=$(docker images --filter=reference="ghcr.io/${{ env.REPO_OWNER }}/ssh-project:testing-*" --format "{{.ID}}" | tail -n +7)
          if [[ -n "$image_ids" ]]; then
            # Remove images older than the 6 most recent
            docker rmi $image_ids
          fi

      - name: Post-build clean-up
        run: docker system prune -af